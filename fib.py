# Each new term in the Fibonacci sequence is generated by adding the previous
# two terms. By starting with 1 and 2, the first 10 terms will be:
# 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

# Returns the value of the nth term in Fibonacci sequence
def fib(n):
    if n == 1:  #Considering n >= 1
        return n
    elif n == 2:
        return n
    else:
        return fib(n-2) + fib(n-1)

# By considering the terms in the Fibonacci sequence whose values do not exceed
# four million...

# Returns a list F of the fibonacci members whose values are under 4 million.
def under4M():
    n = 1
    F = []
    while fib(n) < 4000000:
        F.append(fib(n))
        n = n + 1
    return F

# ...find the sum of the even-valued terms.

# Finds whether an number is even or not
def even(n):
    if n%2 == 0:
        return True
    else:
        return False

# Returns the sum of the members in a list L
def findSum(L):
    lgt = len(L)
    if lgt == 0:                    #If list does not hold any elements sum is 0
        return 0
    else:                           #If it contains returns the last member
        return L[lgt-1] + findSum(L[0:lgt-1])  #and sum the remainder of the list

# Prepare data
F = under4M()
E = list(filter(even, F))    # Filter out odd numbers in F

# Show result
print(findSum(E))
